/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/***/ (function() {

eval("\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n//drag and drop interface\nvar App;\n(function (App) {\n    //project class\n    let ProjectStatus;\n    (function (ProjectStatus) {\n        ProjectStatus[ProjectStatus[\"Active\"] = 0] = \"Active\";\n        ProjectStatus[ProjectStatus[\"Finished\"] = 1] = \"Finished\";\n    })(ProjectStatus = App.ProjectStatus || (App.ProjectStatus = {}));\n    class Project {\n        constructor(id, title, description, people, status) {\n            this.id = id;\n            this.title = title;\n            this.description = description;\n            this.people = people;\n            this.status = status;\n        }\n    }\n    App.Project = Project;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    //listener class\n    class State {\n        constructor() {\n            this.listeners = [];\n        }\n        addListener(listenerFn) {\n            this.listeners.push(listenerFn);\n        }\n    }\n    //project state class, state management\n    class ProjectState extends State {\n        constructor() {\n            super();\n            this.projects = [];\n        }\n        static getInstance() {\n            if (this.instance) {\n                return this.instance;\n            }\n            this.instance = new ProjectState();\n            return this.instance;\n        }\n        addProject(title, description, people) {\n            const newProject = new App.Project(Math.random().toString(), title, description, people, App.ProjectStatus.Active);\n            this.projects.push(newProject);\n            this.updateListeners();\n        }\n        switchStatus(projectId, prjNewStatus) {\n            const project = this.projects.find(prj => prj.id === projectId);\n            if (project && project.status !== prjNewStatus) {\n                project.status = prjNewStatus;\n                this.updateListeners();\n            }\n        }\n        updateListeners() {\n            for (const listener of this.listeners) {\n                listener(this.projects.slice());\n            }\n        }\n    }\n    App.ProjectState = ProjectState;\n    App.projectState = ProjectState.getInstance();\n})(App || (App = {}));\nvar App;\n(function (App) {\n    //validation function\n    function validate(validatableValue) {\n        let isValid = true;\n        if (validatableValue.required) {\n            isValid = isValid && validatableValue.value.toString().trim().length !== 0;\n        }\n        if (validatableValue.minLenght && typeof validatableValue.value === \"string\") {\n            isValid = isValid && validatableValue.value.toString().trim().length >= validatableValue.minLenght;\n        }\n        if (validatableValue.maxLenght && typeof validatableValue.value === \"string\") {\n            isValid = isValid && validatableValue.value.toString().trim().length <= validatableValue.maxLenght;\n        }\n        if (validatableValue.min && typeof validatableValue.value === \"number\") {\n            isValid = isValid && +validatableValue.value >= validatableValue.min;\n        }\n        if (validatableValue.max && typeof validatableValue.value === \"number\") {\n            isValid = isValid && +validatableValue.value <= validatableValue.max;\n        }\n        return isValid;\n    }\n    App.validate = validate;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    //auto binder decorator\n    function AutoBind(_target, _methodName, descriptor) {\n        const originalMethod = descriptor.value;\n        const adjustedDescriptor = {\n            configurable: true,\n            get() {\n                const boundFn = originalMethod.bind(this);\n                return boundFn;\n            },\n        };\n        return adjustedDescriptor;\n    }\n    App.AutoBind = AutoBind;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    //component base class\n    class Component {\n        constructor(templateId, hostElementId, insertAtStart, newElementId) {\n            this.templateElement = document.getElementById(templateId);\n            this.hostElement = document.getElementById(hostElementId);\n            const importedNode = document.importNode(this.templateElement.content, true);\n            this.element = importedNode.firstElementChild;\n            if (newElementId) {\n                this.element.id = newElementId;\n            }\n            this.attach(insertAtStart);\n        }\n        attach(insertAtBegin) {\n            this.hostElement.insertAdjacentElement(insertAtBegin ? \"afterbegin\" : \"beforeend\", this.element);\n        }\n    }\n    App.Component = Component;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    //project input class\n    class ProjectInput extends App.Component {\n        constructor() {\n            super(\"project-input\", \"app\", true, \"user-input\");\n            this.titleInputElement = this.element.querySelector(\"#title\");\n            this.descriptionInputElement = this.element.querySelector(\"#description\");\n            this.peopleInputElement = this.element.querySelector(\"#people\");\n            this.configure();\n        }\n        gatherInput() {\n            const title = this.titleInputElement.value;\n            const description = this.descriptionInputElement.value;\n            const people = this.peopleInputElement.value;\n            if (!App.validate({ value: title, required: true, minLenght: 1 }) ||\n                !App.validate({ value: description, required: true, minLenght: 1 }) ||\n                !App.validate({ value: people, required: true, min: 1, max: 5 })) {\n                alert(\"Invalid Input\");\n                return;\n            }\n            else\n                return [title, description, +people];\n        }\n        clearInput() {\n            this.titleInputElement.value = \"\";\n            this.descriptionInputElement.value = \"\";\n            this.peopleInputElement.value = \"\";\n        }\n        submitHandler(event) {\n            event.preventDefault();\n            const userInput = this.gatherInput();\n            if (Array.isArray(userInput)) {\n                const [title, description, people] = userInput;\n                App.projectState.addProject(title, description, people);\n                this.clearInput();\n            }\n        }\n        configure() {\n            this.element.addEventListener(\"submit\", this.submitHandler);\n        }\n        renderContent() {\n        }\n    }\n    __decorate([\n        App.AutoBind\n    ], ProjectInput.prototype, \"submitHandler\", null);\n    App.ProjectInput = ProjectInput;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    //project item class\n    class ProjectItem extends App.Component {\n        get persons() {\n            if (this.project.people === 1) {\n                return \"1 person is involved\";\n            }\n            else\n                return `${this.project.people} people are involved`;\n        }\n        constructor(hostId, project) {\n            super(\"single-project\", hostId, false, project.id);\n            this.project = project;\n            this.configure();\n            this.renderContent();\n        }\n        renderContent() {\n            this.element.querySelector(\"h2\").innerText = this.project.title;\n            this.element.querySelector(\"h3\").innerText = this.persons;\n            this.element.querySelector(\"p\").innerText = this.project.description;\n        }\n        DragStartHandler(event) {\n            event.dataTransfer.setData(\"text/plain\", this.project.id);\n            event.dataTransfer.effectAllowed = \"move\";\n        }\n        DragEndHandler(_) {\n            console.log(\"DragEnd\");\n        }\n        configure() {\n            this.element.addEventListener(\"dragstart\", this.DragStartHandler);\n            this.element.addEventListener(\"dragend\", this.DragEndHandler);\n        }\n    }\n    __decorate([\n        App.AutoBind\n    ], ProjectItem.prototype, \"DragStartHandler\", null);\n    App.ProjectItem = ProjectItem;\n})(App || (App = {}));\nvar App;\n(function (App) {\n    //project list class\n    class ProjectList extends App.Component {\n        constructor(type) {\n            super(\"project-list\", \"app\", false, `${type}-projects`);\n            this.type = type;\n            this.assignedProjects = [];\n            this.configure();\n            this.renderContent();\n        }\n        renderProjects() {\n            const listEl = document.getElementById(`${this.type}-list`);\n            listEl.innerHTML = \"\";\n            for (const prjItem of this.assignedProjects) {\n                new App.ProjectItem(this.element.querySelector(\"ul\").id, prjItem);\n            }\n        }\n        DragOverHandler(event) {\n            if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\n                event.preventDefault();\n                const listEl = this.element.querySelector(\"ul\");\n                listEl.classList.add(\"droppable\");\n            }\n        }\n        DropHandler(event) {\n            event.preventDefault();\n            const prjId = event.dataTransfer.getData(\"text/plain\");\n            App.projectState.switchStatus(prjId, this.type === \"active\" ? App.ProjectStatus.Active : App.ProjectStatus.Finished);\n        }\n        DragLeaveHandler(_) {\n            const listEl = this.element.querySelector(\"ul\");\n            listEl.classList.remove(\"droppable\");\n        }\n        configure() {\n            var _a, _b, _c;\n            (_a = this.element) === null || _a === void 0 ? void 0 : _a.addEventListener(\"dragover\", this.DragOverHandler);\n            (_b = this.element) === null || _b === void 0 ? void 0 : _b.addEventListener(\"dragleave\", this.DragLeaveHandler);\n            (_c = this.element) === null || _c === void 0 ? void 0 : _c.addEventListener(\"drop\", this.DropHandler);\n            App.projectState.addListener((projects) => {\n                const relatedProjects = projects.filter(prj => {\n                    if (this.type === \"active\") {\n                        return (prj.status === App.ProjectStatus.Active);\n                    }\n                    return (prj.status === App.ProjectStatus.Finished);\n                });\n                this.assignedProjects = relatedProjects;\n                this.renderProjects();\n            });\n            this.renderContent();\n        }\n        renderContent() {\n            const listId = `${this.type}-list`;\n            if (this.element) {\n                this.element.querySelector(\"ul\").id = listId;\n                this.element.querySelector(\"h2\").textContent = `${this.type.toUpperCase()} PROJECTS`;\n            }\n        }\n    }\n    __decorate([\n        App.AutoBind\n    ], ProjectList.prototype, \"DragOverHandler\", null);\n    __decorate([\n        App.AutoBind\n    ], ProjectList.prototype, \"DropHandler\", null);\n    __decorate([\n        App.AutoBind\n    ], ProjectList.prototype, \"DragLeaveHandler\", null);\n    App.ProjectList = ProjectList;\n})(App || (App = {}));\n/// <reference path=\"models/drag-drop.ts\"/>\n/// <reference path=\"models/project.ts\"/>\n/// <reference path=\"state/project-state.ts\"/>\n/// <reference path=\"util/validation.ts\"/>\n/// <reference path=\"decorators/autobind.ts\"/>\n/// <reference path=\"components/base-component.ts\"/>\n/// <reference path=\"components/project-input.ts\"/>\n/// <reference path=\"components/project-item.ts\"/>\n/// <reference path=\"components/project-list.ts\"/>\nvar App;\n(function (App) {\n    new App.ProjectInput();\n    new App.ProjectList(\"active\");\n    new App.ProjectList(\"finished\");\n})(App || (App = {}));\n\n\n//# sourceURL=webpack://drag-drop-ts/./src/app.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/app.ts"]();
/******/ 	
/******/ })()
;