{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://drag-drop-ts/./src/components/base-component.ts","webpack://drag-drop-ts/./src/util/validation.ts","webpack://drag-drop-ts/./src/decorators/autobind.ts","webpack://drag-drop-ts/./src/models/project.ts","webpack://drag-drop-ts/./src/state/project-state.ts","webpack://drag-drop-ts/./src/components/project-input.ts","webpack://drag-drop-ts/./src/components/project-item.ts","webpack://drag-drop-ts/./src/components/project-list.ts","webpack://drag-drop-ts/./src/app.ts"],"sourcesContent":["    //component base class\r\n\r\n    export abstract class Component<T extends HTMLElement, U extends HTMLElement> {\r\n        templateElement: HTMLTemplateElement;\r\n        hostElement: T;\r\n        element: U;\r\n\r\n        constructor(\r\n            templateId: string,\r\n            hostElementId: string,\r\n            insertAtStart: boolean,\r\n            newElementId?: string\r\n        ) {\r\n            this.templateElement = document.getElementById(templateId)! as HTMLTemplateElement;\r\n            this.hostElement = document.getElementById(hostElementId)! as T;\r\n            const importedNode = document.importNode(this.templateElement.content, true);\r\n            this.element = importedNode.firstElementChild as U;\r\n            if (newElementId) {\r\n                this.element.id = newElementId;\r\n            }\r\n\r\n            this.attach(insertAtStart);\r\n        }\r\n        private attach(insertAtBegin: boolean) {\r\n            this.hostElement.insertAdjacentElement(insertAtBegin ? \"afterbegin\" : \"beforeend\", this.element);\r\n        }\r\n\r\n        abstract configure(): void;\r\n        abstract renderContent(): void;\r\n    }","    //validation function\r\n\r\n    export interface validatable {\r\n        value: string | number;\r\n        required?: boolean;\r\n        minLenght?: number;\r\n        maxLenght?: number;\r\n        min?: number;\r\n        max?: number;\r\n    }\r\n\r\n    export function validate(validatableValue: validatable) {\r\n        let isValid = true;\r\n        if (validatableValue.required) {\r\n            isValid = isValid && validatableValue.value.toString().trim().length !== 0;\r\n        }\r\n        if (validatableValue.minLenght && typeof validatableValue.value === \"string\") {\r\n            isValid = isValid && validatableValue.value.toString().trim().length >= validatableValue.minLenght;\r\n        }\r\n        if (validatableValue.maxLenght && typeof validatableValue.value === \"string\") {\r\n            isValid = isValid && validatableValue.value.toString().trim().length <= validatableValue.maxLenght;\r\n        }\r\n        if (validatableValue.min && typeof validatableValue.value === \"number\") {\r\n            isValid = isValid && +validatableValue.value >= validatableValue.min;\r\n        }\r\n        if (validatableValue.max && typeof validatableValue.value === \"number\") {\r\n            isValid = isValid && +validatableValue.value <= validatableValue.max;\r\n        }\r\n        return isValid;\r\n    }","    //auto binder decorator\r\n    export function AutoBind(\r\n        _target: any,\r\n        _methodName: string,\r\n        descriptor: PropertyDescriptor) {\r\n        const originalMethod = descriptor.value;\r\n        const adjustedDescriptor: PropertyDescriptor = {\r\n            configurable: true,\r\n            get() {\r\n                const boundFn = originalMethod.bind(this);\r\n                return boundFn;\r\n            },\r\n        };\r\n        return adjustedDescriptor;\r\n    }","    //project class\r\n\r\n    export enum ProjectStatus { Active, Finished }\r\n    export class Project {\r\n        constructor(\r\n            public id: string,\r\n            public title: string,\r\n            public description: string,\r\n            public people: number,\r\n            public status: ProjectStatus,\r\n        ) { }\r\n    }","import {Project, ProjectStatus} from \"../models/project\";\r\n    \r\n    //listener class\r\n\r\n    type Listener<T> = (items: T[]) => void;\r\n\r\n    class State<T> {\r\n        protected listeners: Listener<T>[] = [];\r\n\r\n        addListener(listenerFn: Listener<T>) {\r\n            this.listeners.push(listenerFn);\r\n        }\r\n    }\r\n\r\n    //project state class, state management\r\n\r\n    export class ProjectState extends State<Project>{\r\n        private projects: Project[] = [];\r\n        private static instance: ProjectState;\r\n\r\n        private constructor() {\r\n            super();\r\n        }\r\n\r\n        static getInstance() {\r\n            if (this.instance) {\r\n                return this.instance;\r\n            }\r\n            this.instance = new ProjectState();\r\n            return this.instance;\r\n        }\r\n\r\n        addProject(title: string, description: string, people: number) {\r\n            const newProject = new Project(Math.random().toString(),\r\n                title,\r\n                description,\r\n                people,\r\n                ProjectStatus.Active);\r\n            this.projects.push(newProject);\r\n            this.updateListeners();\r\n        }\r\n\r\n        switchStatus(projectId: string, prjNewStatus: ProjectStatus) {\r\n            const project = this.projects.find(prj => prj.id === projectId);\r\n            if (project && project.status !== prjNewStatus) {\r\n                project.status = prjNewStatus;\r\n                this.updateListeners();\r\n            }\r\n        }\r\n\r\n        private updateListeners() {\r\n            for (const listener of this.listeners) {\r\n                listener(this.projects.slice());\r\n            }\r\n        }\r\n    }\r\n\r\n    export const projectState = ProjectState.getInstance();\r\n\r\n","import {Component} from \"./base-component\";\r\nimport {validate} from \"../util/validation\";\r\nimport {AutoBind} from \"../decorators/autobind\";\r\nimport {projectState} from \"../state/project-state\";\r\n\r\n    \r\n    //project input class\r\n    export class ProjectInput extends Component<HTMLDivElement, HTMLInputElement> {\r\n        titleInputElement: HTMLInputElement;\r\n        descriptionInputElement: HTMLTextAreaElement;\r\n        peopleInputElement: HTMLInputElement;\r\n\r\n        constructor() {\r\n            super(\"project-input\", \"app\", true, \"user-input\")\r\n            this.titleInputElement = this.element!.querySelector(\"#title\")!;\r\n            this.descriptionInputElement = this.element!.querySelector(\"#description\")!;\r\n            this.peopleInputElement = this.element!.querySelector(\"#people\")!;\r\n            this.configure();\r\n        }\r\n\r\n        private gatherInput(): [string, string, number] | void {\r\n            const title = this.titleInputElement.value;\r\n            const description = this.descriptionInputElement.value;\r\n            const people = this.peopleInputElement.value;\r\n\r\n            if (\r\n                !validate({ value: title, required: true, minLenght: 1 }) ||\r\n                !validate({ value: description, required: true, minLenght: 1 }) ||\r\n                !validate({ value: people, required: true, min: 1, max: 5 })) {\r\n                alert(\"Invalid Input\");\r\n                return;\r\n            }\r\n            else return [title, description, +people];\r\n        }\r\n\r\n        private clearInput() {\r\n            this.titleInputElement.value = \"\";\r\n            this.descriptionInputElement.value = \"\";\r\n            this.peopleInputElement.value = \"\";\r\n        }\r\n\r\n        @AutoBind\r\n        private submitHandler(event: Event) {\r\n            event.preventDefault();\r\n            const userInput = this.gatherInput();\r\n            if (Array.isArray(userInput)) {\r\n                const [title, description, people] = userInput;\r\n                projectState.addProject(title, description, people);\r\n                this.clearInput();\r\n            }\r\n        }\r\n\r\n        configure() {\r\n            this.element!.addEventListener(\"submit\", this.submitHandler);\r\n        }\r\n\r\n        renderContent() {\r\n        }\r\n    }\r\n","import {Component} from \"./base-component\";\r\nimport {Project} from \"../models/project\";\r\nimport {AutoBind} from \"../decorators/autobind\";\r\nimport {Draggable} from \"../models/drag-drop\";\r\n\r\n    //project item class\r\n\r\n    export class ProjectItem extends Component<HTMLUListElement, HTMLLIElement> implements Draggable {\r\n        private project: Project;\r\n\r\n        get persons() {\r\n            if (this.project.people === 1) {\r\n                return \"1 person is involved\";\r\n            }\r\n            else return `${this.project.people} people are involved`;\r\n        }\r\n\r\n        constructor(hostId: string, project: Project) {\r\n            super(\"single-project\", hostId, false, project.id)\r\n            this.project = project;\r\n\r\n            this.configure();\r\n            this.renderContent();\r\n        }\r\n\r\n        renderContent() {\r\n            this.element!.querySelector(\"h2\")!.innerText = this.project.title;\r\n            this.element!.querySelector(\"h3\")!.innerText = this.persons;\r\n            this.element!.querySelector(\"p\")!.innerText = this.project.description;\r\n        }\r\n\r\n        @AutoBind\r\n        DragStartHandler(event: DragEvent) {\r\n            event.dataTransfer!.setData(\"text/plain\", this.project.id);\r\n            event.dataTransfer!.effectAllowed = \"move\";\r\n        }\r\n\r\n        DragEndHandler(_: DragEvent) {\r\n            console.log(\"DragEnd\");\r\n        }\r\n\r\n        configure() {\r\n            this.element!.addEventListener(\"dragstart\", this.DragStartHandler);\r\n            this.element!.addEventListener(\"dragend\", this.DragEndHandler);\r\n\r\n        }\r\n    }","import {Component} from \"./base-component\";\r\nimport {AutoBind} from \"../decorators/autobind\";\r\nimport {projectState} from \"../state/project-state\";\r\nimport {Project, ProjectStatus} from \"../models/project\";\r\nimport {DragTarget} from \"../models/drag-drop\";\r\nimport {ProjectItem} from \"../components/project-item\";\r\n\r\n\r\n    //project list class\r\n\r\n    export class ProjectList extends Component<HTMLDivElement, HTMLElement> implements DragTarget {\r\n        assignedProjects: Project[];\r\n\r\n        constructor(private type: \"active\" | \"finished\") {\r\n            super(\"project-list\", \"app\", false, `${type}-projects`);\r\n            this.assignedProjects = [];\r\n            this.configure();\r\n            this.renderContent();\r\n        }\r\n\r\n        private renderProjects() {\r\n            const listEl = document.getElementById(`${this.type}-list`)! as HTMLUListElement;\r\n            listEl.innerHTML = \"\";\r\n            for (const prjItem of this.assignedProjects) {\r\n                new ProjectItem(this.element.querySelector(\"ul\")!.id, prjItem);\r\n            }\r\n        }\r\n\r\n        @AutoBind\r\n        DragOverHandler(event: DragEvent) {\r\n            if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\r\n                event.preventDefault();\r\n                const listEl = this.element!.querySelector(\"ul\");\r\n                listEl!.classList.add(\"droppable\");\r\n            }\r\n        }\r\n\r\n        @AutoBind\r\n        DropHandler(event: DragEvent) {\r\n            event.preventDefault();\r\n            const prjId = event.dataTransfer!.getData(\"text/plain\");\r\n            projectState.switchStatus(prjId, this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished);\r\n        }\r\n\r\n        @AutoBind\r\n        DragLeaveHandler(_: DragEvent) {\r\n            const listEl = this.element!.querySelector(\"ul\");\r\n            listEl!.classList.remove(\"droppable\");\r\n        }\r\n\r\n        configure() {\r\n            this.element?.addEventListener(\"dragover\", this.DragOverHandler);\r\n            this.element?.addEventListener(\"dragleave\", this.DragLeaveHandler);\r\n            this.element?.addEventListener(\"drop\", this.DropHandler);\r\n\r\n            projectState.addListener((projects: Project[]) => {\r\n                const relatedProjects = projects.filter(prj => {\r\n                    if (this.type === \"active\") {\r\n                        return (prj.status === ProjectStatus.Active);\r\n                    }\r\n                    return (prj.status === ProjectStatus.Finished);\r\n                }\r\n                )\r\n                this.assignedProjects = relatedProjects;\r\n                this.renderProjects();\r\n            })\r\n            this.renderContent();\r\n        }\r\n\r\n        renderContent() {\r\n            const listId = `${this.type}-list`;\r\n            if (this.element) {\r\n                this.element.querySelector(\"ul\")!.id = listId;\r\n                this.element.querySelector(\"h2\")!.textContent = `${this.type.toUpperCase()} PROJECTS`;\r\n            }\r\n        }\r\n    }","import {ProjectInput} from \"./components/project-input\";\r\nimport {ProjectList} from \"./components/project-list\";\r\n\r\n\r\n    new ProjectInput();\r\n    new ProjectList(\"active\");\r\n    new ProjectList(\"finished\");\r\n\r\n\r\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBegin","insertAdjacentElement","validate","validatableValue","isValid","required","value","toString","trim","length","minLenght","maxLenght","min","max","AutoBind","_target","_methodName","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","people","status","State","listeners","addListener","listenerFn","push","ProjectState","super","projects","getInstance","instance","addProject","newProject","Math","random","Active","updateListeners","switchStatus","projectId","prjNewStatus","project","find","prj","listener","slice","projectState","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","gatherInput","alert","clearInput","submitHandler","event","preventDefault","userInput","Array","isArray","addEventListener","renderContent","ProjectItem","persons","hostId","innerText","DragStartHandler","dataTransfer","setData","effectAllowed","DragEndHandler","_","console","log","ProjectList","type","assignedProjects","renderProjects","innerHTML","prjItem","DragOverHandler","types","classList","add","DropHandler","prjId","getData","Finished","DragLeaveHandler","remove","relatedProjects","filter","listId","textContent","toUpperCase"],"sourceRoot":""}